{"version":3,"sources":["gql/queries.js","components/BookList.jsx","components/AddBook.jsx","components/AddAuthor.jsx","components/AddBookOrAuthor.jsx","components/FindABook.jsx","components/Footer.js","App.js","index.js"],"names":["apolloClient","ApolloClient","uri","cache","InMemoryCache","addNewBook","gql","addNewAuhtor","getAllBooks","query","BookList","useState","books","setBooks","client","className","onClick","e","then","result","data","map","book","index","AddBook","authors","setAuthors","useEffect","name","setName","genre","setGenre","authorId","setauthorId","useMutation","addBook","type","value","onChange","target","author","preventDefault","console","log","variables","handleSubmit","AddAuthor","age","setAge","addAuthor","Number","AddBookOrAuthor","FindABook","bookName","setBookName","relatedBooks","setRelatedBooks","handleClick","a","filter","toLowerCase","includes","booksWithSimilarName","placeholder","style","marginLeft","display","justifyContent","gridGap","Footer","href","rel","App","height","backgroundColor","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99ad93d1.chunk.js","sourcesContent":["//apollo client setup\r\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\nimport { gql } from \"@apollo/client\";\r\n\r\n//getting data from graphql server using apollo client\r\nexport const apolloClient = new ApolloClient({\r\n  uri: \"/graphql\", //url of your backend sever\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n//mutations\r\nexport const addNewBook = gql`\r\n  mutation addBook($name: String!, $genre: String!, $authorId: ID!) {\r\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n      genre\r\n    }\r\n  }\r\n`;\r\n\r\nexport const addNewAuhtor = gql`\r\n  mutation addAuthor($name: String!, $age: Int!) {\r\n    addAuthor(name: $name, age: $age) {\r\n      name\r\n      age\r\n    }\r\n  }\r\n`;\r\n\r\n//queries\r\nexport const getAuthorsName = () => {\r\n  return apolloClient.query({\r\n    query: gql`\r\n      {\r\n        authors {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    `,\r\n  });\r\n};\r\n\r\nexport const getAllBooks = () => {\r\n  return apolloClient.query({\r\n    query: gql`\r\n      {\r\n        books {\r\n          name\r\n          genre\r\n          author {\r\n            name\r\n            age\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  });\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\n//apollo client\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { apolloClient, getAllBooks } from \"../gql/queries\";\r\n\r\nconst BookList = () => {\r\n  //get all books from gql server\r\n  const [books, setBooks] = useState([]);\r\n  const showAllBooks = () => {\r\n    getAllBooks().then((result) => {\r\n      setBooks(result.data.books);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <div className=\"book-list\">\r\n        <h3>Get All Books</h3>\r\n        <button onClick={(e) => showAllBooks()}>Show All Books</button>\r\n        <button onClick={() => setBooks([])}>Hide All Books</button>\r\n        <ul className=\"book-slides\">\r\n          {books !== [] &&\r\n            books.map((book, index) => {\r\n              return (\r\n                <div key={book[\"name\"]}>\r\n                  <p>\r\n                    <span>{index + 1}.</span>Name - {book[\"name\"]}\r\n                  </p>\r\n                  <p>\r\n                    {\"  \"}Genre - {book[\"genre\"]}\r\n                  </p>\r\n                  <p>\r\n                    {\"  \"}Author: Name - {book[\"author\"][\"name\"]} , Age - {book[\"author\"][\"age\"]}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n        </ul>\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default BookList;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n//apollo client\r\nimport { ApolloProvider, useMutation } from \"@apollo/client\";\r\nimport { apolloClient, getAuthorsName, addNewBook } from \"../gql/queries\";\r\n\r\nconst AddBook = () => {\r\n  //get the authors names from gqlserver\r\n  const [authors, setAuthors] = useState([]);\r\n  useEffect(() => {\r\n    getAuthorsName().then((result) => {\r\n      setAuthors(result.data.authors);\r\n    });\r\n  }, [setAuthors]);\r\n\r\n  //form states\r\n  const [name, setName] = useState(\"\");\r\n  const [genre, setGenre] = useState(\"\");\r\n  const [authorId, setauthorId] = useState(\"\");\r\n\r\n  //gql mutation addNewBook\r\n  const [addBook] = useMutation(addNewBook);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log({ name, genre, authorId });\r\n    if (name !== \"\" && genre !== \"\" && authorId !== \"\") {\r\n      addBook({ variables: { name, genre, authorId } });\r\n      setName(\"\");\r\n      setGenre(\"\");\r\n      setauthorId(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <div>\r\n        <h3>Add A New Book</h3>\r\n        <form className=\"addBookorAuthor\">\r\n          <label>\r\n            Name:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={(e) => {\r\n                setName(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            Genre:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              name=\"genre\"\r\n              value={genre}\r\n              onChange={(e) => {\r\n                setGenre(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            Select Author:{\" \"}\r\n            <select\r\n              value={authorId}\r\n              onChange={(e) => {\r\n                setauthorId(e.target.value);\r\n              }}\r\n            >\r\n              <option>Select Author</option>\r\n              {authors.map((author) => (\r\n                <option value={author[\"id\"]} key={author[\"id\"]}>\r\n                  {author[\"name\"]}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          <div>\r\n            <button onClick={(e) => handleSubmit(e)}>Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default AddBook;\r\n","import React, { useState } from \"react\";\r\n\r\n//apollo client\r\nimport { ApolloProvider, useMutation } from \"@apollo/client\";\r\nimport { apolloClient, addNewAuhtor } from \"../gql/queries\";\r\n\r\nconst AddAuthor = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n\r\n  //gql mutation\r\n  const [addAuthor] = useMutation(addNewAuhtor);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log({ name, age });\r\n    if (name !== \"\" && age !== \"\") {\r\n      addAuthor({ variables: { name, age } });\r\n      setName(\"\");\r\n      setAge(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <div>\r\n        <h3>Add A New Author</h3>\r\n        <form className=\"addBookorAuthor\">\r\n          <label>\r\n            Name:\r\n            <input type=\"text\" name=\"name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n          </label>\r\n          <label>\r\n            Age:\r\n            <input type=\"number\" name=\"age\" value={age} onChange={(e) => setAge(Number(e.target.value))} />\r\n          </label>\r\n          <div>\r\n            <button onClick={(e) => handleSubmit(e)}>Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default AddAuthor;\r\n","import React from \"react\";\r\nimport AddBook from \"./AddBook\";\r\nimport AddAuthor from \"./AddAuthor\";\r\n\r\n//apollo client\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { apolloClient } from \"../gql/queries\";\r\n\r\nconst AddBookOrAuthor = () => {\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <div>\r\n        <AddBook />\r\n        <AddAuthor />\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default AddBookOrAuthor;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n//apollo client\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { apolloClient, getAllBooks } from \"../gql/queries\";\r\n\r\nconst FindABook = () => {\r\n  //get all the books on 1st render\r\n  const [books, setBooks] = useState([]);\r\n  useEffect(() => {\r\n    getAllBooks().then((result) => {\r\n      setBooks(result.data.books);\r\n    });\r\n  }, []);\r\n\r\n  //getting the entered bookname and querying it\r\n  const [bookName, setBookName] = useState(\"\");\r\n  const [relatedBooks, setRelatedBooks] = useState([]);\r\n  const handleClick = async () => {\r\n    if (bookName !== \"\") {\r\n      const booksWithSimilarName = await books.filter((book) => book[\"name\"].toLowerCase().includes(bookName));\r\n      setRelatedBooks(booksWithSimilarName);\r\n    }\r\n    setBookName(\"\");\r\n  };\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <div>\r\n        <h3>Query A Book</h3>\r\n        <input\r\n          type=\"text\"\r\n          value={bookName}\r\n          onChange={(e) => setBookName(e.target.value)}\r\n          placeholder=\"Type A Book's Name\"\r\n        />\r\n        <button onClick={(e) => handleClick()} style={{ marginLeft: \"0.2rem\" }}>\r\n          Search\r\n        </button>\r\n        <button onClick={(e) => setRelatedBooks([])} style={{ marginLeft: \"0.2rem\" }}>\r\n          Clear\r\n        </button>\r\n        <ul style={{ display: \"grid\", justifyContent: \"center\", gridGap: \"0.5rem\" }}>\r\n          {relatedBooks.map((book, index) => (\r\n            <li key={book[\"name\"]}>\r\n              <p>\r\n                {index + 1}. Name - {book[\"name\"]}\r\n              </p>\r\n              <p>Genre - {book[\"genre\"]}</p>\r\n              <p>\r\n                Author: Name - {book[\"author\"][\"name\"]} ,Age-{book[\"author\"][\"age\"]}\r\n              </p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default FindABook;\r\n","import React from \"react\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <h3>By Sibesh Behera</h3>\r\n      <a href=\"https://github.com/sibesh1\" target=\"_blank\" rel=\"noreferrer\">\r\n        <GitHubIcon className=\"icons\" />\r\n      </a>\r\n      <a href=\"https://www.linkedin.com/in/sibeshbehera/\" target=\"_blank\" rel=\"noreferrer\">\r\n        <LinkedInIcon className=\"icons\" />\r\n      </a>\r\n      <a href=\"https://www.facebook.com/sibesh.behera/\" target=\"_blank\" rel=\"noreferrer\">\r\n        <FacebookIcon className=\"icons\" />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n//https://github.com/sibesh1\r\n//https://www.linkedin.com/in/sibeshbehera/\r\n//https://www.facebook.com/sibesh.behera/\r\n","import BookList from \"./components/BookList\";\nimport AddBookOrAuthor from \"./components/AddBookOrAuthor\";\nimport FindABook from \"./components/FindABook\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Book Query Service</h1>\n      <Footer />\n      <div className=\"components\">\n        <div className=\"left-side\">\n          <BookList />\n          <FindABook />\n        </div>\n        <hr style={{ height: \"98%\", backgroundColor: \"#ADF7B6\", width: \"2%\" }} />\n        <AddBookOrAuthor />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}